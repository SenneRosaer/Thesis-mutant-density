Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
Values.contains( Object value );1;0;3
KeySetIterator.next( );1;0;3
AbstractHashedMap.remove( Object key );4;3;17
AbstractHashedMap.isEqualKey( Object key1 , Object key2 );2;2;3
KeySet.remove( Object key );1;0;5
AbstractHashedMap.destroyEntry( HashEntry entry );1;0;5
EntrySetIterator.next( );1;0;3
EntrySetIterator.EntrySetIterator( AbstractHashedMap parent );1;0;3
AbstractHashedMap.equals( Object obj );11;8;33
HashEntry.equals( Object obj );6;7;12
AbstractHashedMap.convertKey( Object key );2;1;3
HashEntry.toString( );1;0;3
HashMapIterator.getKey( );2;1;7
AbstractHashedMap.containsValue( Object value );8;8;24
AbstractHashedMap.entryKey( HashEntry entry );1;0;3
HashMapIterator.next( );1;0;3
KeySet.contains( Object key );1;0;3
Values.iterator( );1;0;3
AbstractHashedMap.get( Object key );4;3;12
AbstractHashedMap.AbstractHashedMap( int initialCapacity , float loadFactor , int threshold );1;0;7
EntrySet.EntrySet( AbstractHashedMap parent );1;0;4
Values.Values( AbstractHashedMap parent );1;0;4
AbstractHashedMap.hashCode( );2;1;8
Values.clear( );1;0;3
AbstractHashedMap.removeEntry( HashEntry entry , int hashIndex , HashEntry previous );2;1;7
AbstractHashedMap.calculateThreshold( int newCapacity , float factor );1;1;3
HashEntry.getKey( );2;1;3
EntrySet.clear( );1;0;3
AbstractHashedMap.clear( );2;4;8
AbstractHashedMap.createEntry( HashEntry next , int hashCode , Object key , Object value );1;0;3
HashMapIterator.HashMapIterator( AbstractHashedMap parent );1;0;3
AbstractHashedMap.isEqualValue( Object value1 , Object value2 );2;2;3
AbstractHashedMap.toString( );6;4;22
AbstractHashedMap.putAll( Map map );3;4;12
AbstractHashedMap.AbstractHashedMap( int initialCapacity );1;0;3
AbstractHashedMap.init( );1;0;2
AbstractHashedMap.entryHashCode( HashEntry entry );1;0;3
AbstractHashedMap.createKeySetIterator( );2;1;6
HashMapIterator.setValue( Object value );2;1;7
AbstractHashedMap.size( );1;0;3
KeySet.clear( );1;0;3
AbstractHashedMap.checkCapacity( );3;3;8
KeySet.size( );1;0;3
***not in a method***;0;1;0
HashIterator.toString( );2;1;7
AbstractHashedMap.createValuesIterator( );2;1;6
AbstractHashedMap.clone( );2;0;16
AbstractHashedMap.reuseEntry( HashEntry entry , int hashIndex , int hashCode , Object key , Object value );1;0;6
AbstractHashedMap.put( Object key , Object value );4;3;16
HashIterator.remove( );3;2;11
AbstractHashedMap.entryNext( HashEntry entry );1;0;3
HashMapIterator.getValue( );2;1;7
AbstractHashedMap.AbstractHashedMap( );1;0;3
AbstractHashedMap.hash( Object key );1;8;8
AbstractHashedMap.createEntrySetIterator( );2;1;6
KeySetIterator.KeySetIterator( AbstractHashedMap parent );1;0;3
AbstractHashedMap.isEmpty( );1;1;3
HashEntry.setValue( Object value );1;0;5
AbstractHashedMap.containsKey( Object key );4;3;12
HashEntry.hashCode( );3;3;4
HashIterator.HashIterator( AbstractHashedMap parent );3;4;13
AbstractHashedMap.values( );2;1;6
HashIterator.nextEntry( );5;6;19
ValuesIterator.next( );1;0;3
AbstractHashedMap.ensureCapacity( int newCapacity );6;8;29
EntrySet.size( );1;0;3
AbstractHashedMap.hashIndex( int hashCode , int dataSize );1;2;3
AbstractHashedMap.entrySet( );2;1;6
HashIterator.currentEntry( );1;0;3
AbstractHashedMap.removeMapping( HashEntry entry , int hashIndex , HashEntry previous );1;2;6
ValuesIterator.ValuesIterator( AbstractHashedMap parent );1;0;3
EntrySet.remove( Object obj );3;2;12
AbstractHashedMap.AbstractHashedMap( int initialCapacity , float loadFactor );4;3;14
AbstractHashedMap.doReadObject( ObjectInputStream in );2;2;13
AbstractHashedMap.getEntry( Object key );4;3;12
AbstractHashedMap.addEntry( HashEntry entry , int hashIndex );1;0;3
EntrySet.iterator( );1;0;3
AbstractHashedMap.mapIterator( );2;1;6
KeySet.iterator( );1;0;3
HashIterator.hasNext( );1;1;3
HashEntry.HashEntry( HashEntry next , int hashCode , Object key , Object value );1;0;7
AbstractHashedMap.entryValue( HashEntry entry );1;0;3
HashEntry.getValue( );1;0;3
AbstractHashedMap.addMapping( int hashIndex , int hashCode , Object key , Object value );1;2;7
AbstractHashedMap.updateEntry( HashEntry entry , Object newValue );1;0;3
KeySet.KeySet( AbstractHashedMap parent );1;0;4
Values.size( );1;0;3
AbstractHashedMap.calculateNewCapacity( int proposedCapacity );4;4;14
EntrySet.contains( Object entry );3;2;8
AbstractHashedMap.keySet( );2;1;6
AbstractHashedMap.doWriteObject( ObjectOutputStream out );2;0;9
AbstractHashedMap.AbstractHashedMap( Map map );1;1;4