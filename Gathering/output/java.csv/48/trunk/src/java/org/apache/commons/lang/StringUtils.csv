Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
StringUtils.startsWith( String str , String prefix , boolean ignoreCase );5;7;9
StringUtils.indexOf( String str , char searchChar );2;1;6
StringUtils.removeEnd( String str , String remove );4;2;9
StringUtils.upperCase( String str );2;1;6
StringUtils.equals( String str1 , String str2 );2;2;3
StringUtils.left( String str , int len );4;3;12
StringUtils.strip( String str , String stripChars );2;0;7
StringUtils.stripToNull( String str );3;2;7
StringUtils.join( Object [ ] array , char separator , int startIndex , int endIndex );7;10;20
StringUtils.containsNone( String str , char [ ] invalidChars );6;8;16
StringUtils.repeat( String str , int repeat );12;20;40
StringUtils.abbreviate( String str , int offset , int maxWidth );9;18;27
StringUtils.escape( String str );1;0;3
StringUtils.containsAny( String str , String searchChars );2;1;6
StringUtils.trim( String str );2;1;3
StringUtils.indexOfAny( String str , String [ ] searchStrs );8;12;22
StringUtils.center( String str , int size , char padChar );4;7;13
StringUtils.isNumericSpace( String str );5;6;12
StringUtils.rightPad( String str , int size , char padChar );4;4;13
StringUtils.uncapitalize( String str );3;3;10
StringUtils.upperCase( String str , Locale locale );2;1;6
StringUtils.leftPad( String str , int size , char padChar );4;4;13
StringUtils.capitalize( String str );3;3;10
StringUtils.containsOnly( String str , char [ ] valid );5;7;12
StringUtils.stripStart( String str , String stripChars );9;13;19
StringUtils.containsNone( String str , String invalidChars );3;3;6
StringUtils.splitWorker( String str , char separatorChar , boolean preserveAllTokens );10;9;31
StringUtils.right( String str , int len );4;4;12
StringUtils.join( Collection collection , char separator );2;1;6
StringUtils.stripToEmpty( String str );2;1;3
StringUtils.substringBetween( String str , String tag );1;0;3
StringUtils.lastIndexOf( String str , String searchStr );3;4;6
StringUtils.reverseDelimited( String str , char separatorChar );2;1;8
StringUtils.rightPad( String str , int size , String padStr );9;11;29
StringUtils.isBlank( String str );5;6;12
StringUtils.getChomp( String str , String sep );3;4;10
StringUtils.split( String str , String separatorChars , int max );1;0;3
StringUtils.equalsIgnoreCase( String str1 , String str2 );2;2;3
StringUtils.join( Object [ ] array , char separator );2;1;6
StringUtils.reverseDelimitedString( String str , String separatorChars );3;2;11
StringUtils.mid( String str , int pos , int len );6;8;15
StringUtils.indexOfAnyBut( String str , String searchChars );5;6;11
StringUtils.chomp( String str );8;11;22
StringUtils.swapCase( String str );7;5;20
StringUtils.replace( String text , String searchString , String replacement );1;1;3
StringUtils.padding( int repeat , char padChar );3;3;10
StringUtils.lastIndexOfAny( String str , String [ ] searchStrs );6;9;19
StringUtils.indexOfAny( String str , char [ ] searchChars );6;8;14
StringUtils.leftPad( String str , int size );1;0;3
StringUtils.substring( String str , int start , int end );8;9;24
StringUtils.lastIndexOf( String str , String searchStr , int startPos );3;4;6
StringUtils.replaceEach( String text , String [ ] searchList , String [ ] replacementList );1;0;3
StringUtils.splitByCharacterType( String str , boolean camelCase );9;15;31
StringUtils.join( Collection collection , String separator );2;1;6
StringUtils.removeStartIgnoreCase( String str , String remove );4;1;9
StringUtils.replaceOnce( String text , String searchString , String replacement );1;0;3
StringUtils.join( Iterator iterator , String separator );8;6;26
StringUtils.split( String str , String separatorChars );1;1;3
StringUtils.indexOf( String str , String searchStr , int startPos );5;7;9
StringUtils.isWhitespace( String str );4;4;12
StringUtils.reverse( String str );2;1;6
StringUtils.startsWithIgnoreCase( String str , String prefix );1;0;3
StringUtils.deleteWhitespace( String str );5;5;17
StringUtils.getCommonPrefix( String [ ] strs );6;7;16
StringUtils.getNestedString( String str , String tag );1;0;3
StringUtils.capitalise( String str );1;0;3
StringUtils.indexOfAnyBut( String str , char [ ] searchChars );6;8;15
StringUtils.isNotEmpty( String str );1;1;3
StringUtils.containsIgnoreCase( String str , String searchStr );3;3;6
StringUtils.StringUtils( );1;0;3
StringUtils.leftPad( String str , int size , String padStr );9;11;29
StringUtils.replaceEach( String text , String [ ] searchList , String [ ] replacementList , boolean repeat , int timeToLive );32;66;86
StringUtils.splitPreserveAllTokens( String str );1;1;3
StringUtils.center( String str , int size );1;0;3
StringUtils.splitPreserveAllTokens( String str , String separatorChars , int max );1;0;3
StringUtils.difference( String str1 , String str2 );4;4;13
StringUtils.lowerCase( String str );2;1;6
StringUtils.abbreviate( String str , int maxWidth );1;0;3
StringUtils.isAlphanumericSpace( String str );5;6;12
***not in a method***;0;1;0
StringUtils.isAlphaSpace( String str );5;6;12
StringUtils.indexOfAny( String str , String searchChars );3;2;6
StringUtils.split( String str , char separatorChar );1;0;3
StringUtils.splitByCharacterType( String str );1;0;3
StringUtils.containsOnly( String str , String validChars );3;3;6
StringUtils.center( String str , int size , String padStr );5;7;16
StringUtils.splitByWholeSeparatorPreserveAllTokens( String str , String separator , int max );1;0;3
StringUtils.uncapitalise( String str );1;0;3
StringUtils.splitByCharacterTypeCamelCase( String str );1;0;3
StringUtils.contains( String str , char searchChar );2;1;6
StringUtils.prechomp( String str , String sep );2;3;7
StringUtils.stripAll( String [ ] strs , String stripChars );4;5;11
StringUtils.splitPreserveAllTokens( String str , char separatorChar );1;0;3
StringUtils.getNestedString( String str , String open , String close );1;0;3
StringUtils.substringBetween( String str , String open , String close );6;11;13
StringUtils.strip( String str );1;0;3
StringUtils.join( Iterator iterator , char separator );7;5;24
StringUtils.endsWith( String str , String suffix );1;0;3
StringUtils.substringAfterLast( String str , String separator );5;6;13
StringUtils.stripEnd( String str , String stripChars );9;15;18
StringUtils.join( Object [ ] array , String separator , int startIndex , int endIndex );8;11;24
StringUtils.chompLast( String str );1;0;3
StringUtils.lowerCase( String str , Locale locale );2;1;6
StringUtils.splitByWholeSeparatorWorker( String str , String separator , int max , boolean preserveAllTokens );11;14;47
StringUtils.replaceEachRepeatedly( String text , String [ ] searchList , String [ ] replacementList );2;1;4
StringUtils.indexOfDifference( String str1 , String str2 );9;14;18
StringUtils.chomp( String str , String separator );4;3;9
StringUtils.stripAll( String [ ] strs );1;0;3
StringUtils.defaultString( String str );2;1;3
StringUtils.substringAfter( String str , String separator );4;4;13
StringUtils.chopNewline( String str );4;7;15
StringUtils.getPrechomp( String str , String sep );2;3;7
StringUtils.trimToEmpty( String str );2;1;3
StringUtils.startsWith( String str , String prefix );1;0;3
StringUtils.deleteSpaces( String str );2;1;6
StringUtils.defaultIfEmpty( String str , String defaultStr );2;0;3
StringUtils.isAlphanumeric( String str );4;4;12
StringUtils.countMatches( String str , String sub );4;5;12
StringUtils.concatenate( Object [ ] array );1;0;3
StringUtils.length( String str );2;1;3
StringUtils.join( Object [ ] array , String separator );2;1;6
StringUtils.isAsciiPrintable( String str );4;4;12
StringUtils.split( String str );1;1;3
StringUtils.removeEndIgnoreCase( String str , String remove );4;2;9
StringUtils.isAlpha( String str );4;4;12
StringUtils.ordinalIndexOf( String str , String searchStr , int ordinal );7;10;18
StringUtils.lastIndexOf( String str , char searchChar );2;1;6
StringUtils.overlay( String str , String overlay , int start , int end );8;11;31
StringUtils.endsWithIgnoreCase( String str , String suffix );1;0;3
StringUtils.rightPad( String str , int size );1;0;3
StringUtils.substringBeforeLast( String str , String separator );4;3;10
StringUtils.isEmpty( String str );2;3;3
StringUtils.splitPreserveAllTokens( String str , String separatorChars );1;1;3
StringUtils.trimToNull( String str );2;0;4
StringUtils.indexOf( String str , String searchStr );3;4;6
StringUtils.endsWith( String str , String suffix , boolean ignoreCase );5;8;10
StringUtils.replace( String text , String searchString , String replacement , int max );11;18;25
StringUtils.lastIndexOf( String str , char searchChar , int startPos );2;1;6
StringUtils.join( Object [ ] array );1;0;3
StringUtils.replaceChars( String str , char searchChar , char replaceChar );2;1;6
StringUtils.capitaliseAllWords( String str );1;0;3
StringUtils.indexOf( String str , char searchChar , int startPos );2;1;6
StringUtils.chompLast( String str , String sep );3;3;10
StringUtils.getLevenshteinDistance( String s , String t );10;22;41
StringUtils.splitByWholeSeparator( String str , String separator );1;1;3
StringUtils.isNumeric( String str );4;4;12
StringUtils.splitWorker( String str , String separatorChars , int max , boolean preserveAllTokens );23;26;77
StringUtils.substringBefore( String str , String separator );5;5;13
StringUtils.splitByWholeSeparatorPreserveAllTokens( String str , String separator );1;1;3
StringUtils.clean( String str );2;1;3
StringUtils.indexOfDifference( String [ ] strs );15;25;43
StringUtils.containsAny( String str , char [ ] searchChars );8;12;14
StringUtils.substringsBetween( String str , String open , String close );9;10;30
StringUtils.replaceChars( String str , String searchChars , String replaceChars );8;6;28
StringUtils.contains( String str , String searchStr );3;4;6
StringUtils.isNotBlank( String str );1;1;3
StringUtils.splitByWholeSeparator( String str , String separator , int max );1;0;3
StringUtils.overlayString( String text , String overlay , int start , int end );1;4;7
StringUtils.startsWithAny( String string , String [ ] searchStrings );5;3;12
StringUtils.remove( String str , char remove );5;7;13
StringUtils.substring( String str , int start );5;5;15
StringUtils.defaultString( String str , String defaultStr );2;1;3
StringUtils.removeStart( String str , String remove );4;1;9
StringUtils.remove( String str , String remove );3;2;6
StringUtils.chop( String str );5;7;18