Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
MappingJackson2HttpMessageConverterTests.readTyped( );1;0;18
MappingJackson2HttpMessageConverterTests.writeSubType( );1;0;10
MappingJackson2HttpMessageConverterTests.prefixJsonCustom( );1;0;6
MappingJackson2HttpMessageConverterTests.getJavaType( Type type , @ Nullable Class < ? > contextClass );4;1;8
MyBean.getNumber( );1;0;3
MappingJackson2HttpMessageConverterTests.readAscii( );1;0;8
MappingJackson2HttpMessageConverterTests.readAndWriteParameterizedType( );1;0;25
JacksonViewBean.setWithView2( String withView2 );1;0;3
PrettyPrintBean.setName( String name );1;0;3
MappingJackson2HttpMessageConverterTests.readAndWriteGenerics( );5;0;34
MyBean.isBool( );1;0;3
MyBean.getFraction( );1;0;3
MappingJackson2HttpMessageConverterTests.fieldLevelJsonView( );1;0;14
MappingJackson2HttpMessageConverterTests.writeOptional( );1;0;8
MyBean.setArray( String [ ] array );1;0;3
MappingJackson2HttpMessageConverterTests.writeParameterizedBaseType( );1;0;26
MappingJackson2HttpMessageConverterTests.writeWithBaseType( );1;0;20
MappingJackson2HttpMessageConverterTests.readWithCustomized( );1;0;13
MappingJackson2HttpMessageConverterTests.readWithNoDefaultConstructor( );1;0;8
JacksonFilteredBean.setProperty2( String property2 );1;0;3
MyBean.setBytes( byte [ ] bytes );1;0;3
MyBean.setFraction( float fraction );1;0;3
MappingJackson2HttpMessageConverterWithCustomization.customizeReader( ObjectReader reader , JavaType javaType );1;0;3
JacksonViewBean.setWithoutView( String withoutView );1;0;3
BeanWithNoDefaultConstructor.getProperty2( );1;0;3
MyBean.setNumber( int number );1;0;3
MappingJackson2HttpMessageConverterTests.canReadWithObjectMapperRegistrationForType( );1;0;16
JacksonFilteredBean.getProperty1( );1;0;3
MyBase.getString( );1;0;3
MappingJackson2HttpMessageConverterTests.classLevelJsonView( );1;0;14
BeanWithNoDefaultConstructor.BeanWithNoDefaultConstructor( String property1 , String property2 );1;0;4
MyBean.getArray( );1;0;3
JacksonViewBean.getWithoutView( );1;0;3
MappingJackson2HttpMessageConverterTests.write( );1;0;20
MappingJackson2HttpMessageConverterWithCustomization.customizeWriter( ObjectWriter writer , JavaType javaType , MediaType contentType );1;0;3
MappingJackson2HttpMessageConverterTests.writeWithCustomized( );1;0;14
MappingJackson2HttpMessageConverterTests.prefixJson( );1;0;6
JacksonFilteredBean.setProperty1( String property1 );1;0;3
MappingJackson2HttpMessageConverterTests.readValidJsonWithUnknownProperty( );1;0;6
MappingJackson2HttpMessageConverterTests.prettyPrintWithSse( );1;0;10
MappingJackson2HttpMessageConverterTests.writeUTF16( );1;0;8
BeanWithNoDefaultConstructor.getProperty1( );1;0;3
MyBean.getBytes( );1;0;3
MappingJackson2HttpMessageConverterTests.writeSubTypeList( );1;0;20
MappingJackson2HttpMessageConverterTests.canWrite( );1;0;7
JacksonFilteredBean.getProperty2( );1;0;3
MappingJackson2HttpMessageConverterTests.toString( );2;1;3
MappingJackson2HttpMessageConverterTests.writeAscii( );1;0;11
PrettyPrintBean.getName( );1;0;3
MappingJackson2HttpMessageConverterTests.canReadAndWriteMicroformats( );1;0;4
MyBase.setString( String string );1;0;3
MappingJackson2HttpMessageConverterTests.readNonUnicode( );1;0;8
JacksonViewBean.getWithView2( );1;0;3
JacksonViewBean.setWithView1( String withView1 );1;0;3
MyBean.setBool( boolean bool );1;0;3
MappingJackson2HttpMessageConverterTests.prettyPrint( );1;0;10
MappingJackson2HttpMessageConverterTests.readUntyped( );1;0;21
MappingJackson2HttpMessageConverterTests.getSupportedMediaTypes( );1;0;12
MappingJackson2HttpMessageConverterTests.readInvalidJson( );1;0;7
MappingJackson2HttpMessageConverterTests.canRead( );1;0;7
MyCustomizedBean.getProperty( );1;0;3
MyCustomizedBean.setProperty( MyCustomEnum property );1;0;3
JacksonViewBean.getWithView1( );1;0;3
MappingJackson2HttpMessageConverterTests.filters( );1;0;14