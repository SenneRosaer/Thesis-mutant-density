Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
PersonTransformationController.transformMono( @ RequestBody Mono < Person > personFuture );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithPublisherXml( HttpServer httpServer );1;0;7
PersonTransformationController.transformObservable( @ RequestBody Observable < Person > persons );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithFlowableXml( HttpServer httpServer );1;0;7
PersonResponseBodyController.getList( );1;0;3
RequestMappingMessageConversionIntegrationTests.personTransformWithCompletableFuture( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.personCreateWithFluxJson( HttpServer httpServer );1;0;7
PersonTransformationController.transformPublisher( @ RequestBody Publisher < Person > persons );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithMonoDeclaredAsObject( HttpServer httpServer );1;0;7
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithEmptyMono( HttpServer httpServer );1;0;9
Person.toString( );1;0;5
PersonResponseBodyController.getObservable( );1;0;3
PersonResponseBodyController.getPerson( );1;0;3
PersonCreateController.createWithMono( @ RequestBody Mono < Person > mono );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithPublisher( HttpServer httpServer );2;1;7
RequestMappingMessageConversionIntegrationTests.resource( HttpServer httpServer );1;0;9
ResourceController.resource( );1;0;3
RequestMappingMessageConversionIntegrationTests.initApplicationContext( );1;0;6
RequestMappingMessageConversionIntegrationTests.byteBufferResponseBodyWithFlowable( HttpServer httpServer );1;0;5
PersonCreateController.createWithObservable( @ RequestBody Observable < Person > observable );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithSingle( HttpServer httpServer );1;0;7
PersonTransformationController.transformCompletableFuture( @ RequestBody CompletableFuture < Person > future );1;0;3
RawResponseBodyController.getObservable( );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithFluxXml( HttpServer httpServer );1;0;7
PersonResponseBodyController.getMonoEmpty( );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateViaDefaultMethodWithGenerics( HttpServer httpServer );1;0;6
RequestMappingMessageConversionIntegrationTests.personTransformWithMono( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.personTransformWithFlowable( HttpServer httpServer );3;0;6
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithMonoResponseEntity( HttpServer httpServer );1;0;7
PersonResponseBodyController.getMonoResponseEntity( );1;0;4
RequestMappingMessageConversionIntegrationTests.personTransformWithPublisher( HttpServer httpServer );3;0;6
PersonCreateController.createWithFlowable( @ RequestBody Flowable < Person > flowable );1;0;3
RawResponseBodyController.getFlowable( );1;0;3
RawResponseBodyController.getFlux( );1;0;3
PersonTransformationController.transformFlux( @ RequestBody Flux < Person > persons );1;0;3
People.People( );1;0;2
Person.getName( );1;0;3
Person.setName( String name );1;0;3
PersonResponseBodyController.getMono( );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithPublisherJson( HttpServer httpServer );1;0;7
PersonTransformationController.transformMaybe( @ RequestBody Maybe < Person > personFuture );1;0;3
RequestMappingMessageConversionIntegrationTests.personTransformWithMaybe( HttpServer httpServer );1;0;5
PersonResponseBodyController.getSingle( );1;0;3
People.getPerson( );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithFlowableJson( HttpServer httpServer );1;0;7
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithCompletableFuture( HttpServer httpServer );1;0;7
RequestMappingMessageConversionIntegrationTests.personCreateWithObservableXml( HttpServer httpServer );1;0;7
PersonCreateController.createWithPublisher( @ RequestBody Publisher < Person > publisher );1;0;3
RequestMappingMessageConversionIntegrationTests.test( @ RequestBody Mono < E > body );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithSingle( HttpServer httpServer );1;0;7
PersonCreateController.createWithFlux( @ RequestBody Flux < Person > flux );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithList( HttpServer httpServer );2;0;7
Person.Person( );1;0;2
RequestMappingMessageConversionIntegrationTests.personTransformWithSingle( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithMono( HttpServer httpServer );1;0;7
RequestMappingMessageConversionIntegrationTests.personTransformWithFlux( HttpServer httpServer );3;0;6
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithFlux( HttpServer httpServer );2;0;5
RequestMappingMessageConversionIntegrationTests.personTransformWithObservable( HttpServer httpServer );3;0;6
RequestMappingMessageConversionIntegrationTests.byteBufferResponseBodyWithPublisher( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithMonoResponseEntityXml( HttpServer httpServer );1;0;9
Person.hashCode( );2;1;3
RequestMappingMessageConversionIntegrationTests.personTransform( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.byteBufferResponseBodyWithFlux( HttpServer httpServer );1;0;5
RequestMappingMessageConversionIntegrationTests.personTransformWithMonoAndXml( HttpServer httpServer );1;0;5
PersonTransformationController.transformFlowable( @ RequestBody Flowable < Person > persons );1;0;3
People.People( Person ... persons );1;0;3
RequestMappingMessageConversionIntegrationTests.byteBufferResponseBodyWithMono( HttpServer httpServer );1;0;7
PersonResponseBodyController.getMonoDeclaredAsObject( );1;0;3
RequestMappingMessageConversionIntegrationTests.byteBufferResponseBodyWithObservable( HttpServer httpServer );1;0;6
PersonResponseBodyController.getCompletableFuture( );1;0;3
RequestMappingMessageConversionIntegrationTests.personCreateWithObservableJson( HttpServer httpServer );1;0;7
RequestMappingMessageConversionIntegrationTests.personCreateWithMono( HttpServer httpServer );1;0;7
RawResponseBodyController.getPublisher( );1;0;5
PersonResponseBodyController.getFlux( );1;0;3
PersonTransformationController.transformSingle( @ RequestBody Single < Person > personFuture );1;0;3
Person.equals( Object o );5;8;10
PersonTransformationController.transformPerson( @ RequestBody Person person );1;0;3
RawResponseBodyController.getMonoString( );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBodyWithObservable( HttpServer httpServer );2;0;5
PersonResponseBodyController.getMonoResponseEntityXml( );1;0;4
Person.Person( String name );1;0;3
PersonResponseBodyController.getPublisher( );1;0;3
RequestMappingMessageConversionIntegrationTests.personResponseBody( HttpServer httpServer );1;0;7
PersonCreateController.createWithSingle( @ RequestBody Single < Person > single );1;0;3