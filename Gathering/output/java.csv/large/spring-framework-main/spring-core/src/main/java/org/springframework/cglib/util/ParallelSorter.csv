Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
ParallelSorter.chooseComparer( int index , Comparator cmp );8;1;21
IntComparer.IntComparer( int [ ] a );1;0;1
Generator.Generator( );1;0;3
LongComparer.compare( int i , int j );1;0;5
Generator.nextInstance( Object instance );1;0;3
ComparatorComparer.ComparatorComparer( Object [ ] a , Comparator cmp );1;0;4
LongComparer.LongComparer( long [ ] a );1;0;1
IntComparer.compare( int i , int j );1;1;1
ParallelSorter.mergeSort( int index , int lo , int hi );1;0;3
ShortComparer.compare( int i , int j );1;1;1
ParallelSorter.quickSort( int index , Comparator cmp );1;0;3
Generator.generateClass( ClassVisitor v );4;2;11
FloatComparer.compare( int i , int j );1;0;5
Generator.getDefaultClassLoader( );1;0;3
ParallelSorter.len( );1;0;3
ShortComparer.ShortComparer( short [ ] a );1;0;1
Generator.setArrays( Object [ ] arrays );1;0;3
ObjectComparer.compare( int i , int j );1;0;3
ComparatorComparer.compare( int i , int j );1;0;3
ParallelSorter.mergeSort( int index );1;0;3
Generator.firstInstance( Class type );1;0;3
DoubleComparer.DoubleComparer( double [ ] a );1;0;1
DoubleComparer.compare( int i , int j );1;0;5
FloatComparer.FloatComparer( float [ ] a );1;0;1
ParallelSorter.mergeSort( int index , int lo , int hi , Comparator cmp );1;1;4
ObjectComparer.ObjectComparer( Object [ ] a );1;0;1
ParallelSorter.ParallelSorter( );1;0;2
Generator.create( );1;0;3
ByteComparer.compare( int i , int j );1;1;1
ParallelSorter.quickSort( int index , int lo , int hi );1;0;3
ParallelSorter.quickSort( int index , int lo , int hi , Comparator cmp );1;1;4
ByteComparer.ByteComparer( byte [ ] a );1;0;1
ParallelSorter.compare( int i , int j );1;0;3
ParallelSorter.create( Object [ ] arrays );1;0;5
ParallelSorter.mergeSort( int index , Comparator cmp );1;0;3
ParallelSorter.quickSort( int index );1;0;3