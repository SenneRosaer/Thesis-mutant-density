Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
SpringFactoriesLoader.throwing( BiFunction < String , Throwable , ? extends RuntimeException > exceptionFactory );1;0;5
SpringFactoriesLoader.forDefaultResourceLocation( );1;0;3
KotlinDelegate.instantiate( Constructor < T > constructor , Object [ ] args );2;1;8
FactoryInstantiator.findConstructor( Class < ? > factoryImplementationClass );5;3;10
SpringFactoriesLoader.none( );1;0;3
SpringFactoriesLoader.resolve( Class < T > type );1;0;3
KotlinDelegate.findPrimaryConstructor( Class < T > clazz );3;2;15
SpringFactoriesLoader.loadFactories( Class < T > factoryType , @ Nullable ClassLoader classLoader );1;0;3
SpringFactoriesLoader.loadFactoryNames( Class < ? > factoryType , @ Nullable ClassLoader classLoader );1;0;3
SpringFactoriesLoader.load( Class < T > factoryType , @ Nullable ArgumentResolver argumentResolver , @ Nullable FailureHandler failureHandler );4;2;15
SpringFactoriesLoader.and( ArgumentResolver argumentResolver );2;1;6
SpringFactoriesLoader.forDefaultResourceLocation( @ Nullable ClassLoader classLoader );1;0;3
SpringFactoriesLoader.load( Class < T > factoryType , @ Nullable FailureHandler failureHandler );1;0;3
SpringFactoriesLoader.load( Class < T > factoryType );1;0;3
FactoryInstantiator.findPrimaryKotlinConstructor( Class < ? > factoryImplementationClass );2;0;4
FactoryInstantiator.forClass( Class < ? > factoryImplementationClass );2;1;6
SpringFactoriesLoader.logging( Log logger );1;0;3
FactoryInstantiator.findDeclaredConstructor( Class < ? > factoryImplementationClass );2;0;8
SpringFactoriesLoader.andSupplied( Class < T > type , Supplier < T > valueSupplier );1;0;3
SpringFactoriesLoader.of( Class < T > type , T value );1;0;3
SpringFactoriesLoader.and( Class < T > type , T value );1;0;3
FactoryInstantiator.FactoryInstantiator( Constructor < T > constructor );1;0;4
SpringFactoriesLoader.SpringFactoriesLoader( @ Nullable ClassLoader classLoader , Map < String , List < String > > factories );1;0;4
SpringFactoriesLoader.from( Function < Class < ? > , Object > function );1;0;9
SpringFactoriesLoader.instantiateFactory( String implementationName , Class < T > type , @ Nullable ArgumentResolver argumentResolver , FailureHandler failureHandler );3;0;13
SpringFactoriesLoader.forResourceLocation( String resourceLocation );1;0;3
SpringFactoriesLoader.loadFactoryNames( Class < ? > factoryType );1;0;3
SpringFactoriesLoader.load( Class < T > factoryType , @ Nullable ArgumentResolver argumentResolver );1;0;3
FactoryInstantiator.resolveArgs( @ Nullable ArgumentResolver argumentResolver );3;1;6
FactoryInstantiator.instantiate( @ Nullable ArgumentResolver argumentResolver );2;0;7
KotlinDelegate.makeAccessible( Constructor < T > constructor , KFunction < T > kotlinConstructor );3;3;6
SpringFactoriesLoader.forResourceLocation( String resourceLocation , @ Nullable ClassLoader classLoader );2;1;9
SpringFactoriesLoader.throwing( );1;0;3
SpringFactoriesLoader.ofSupplied( Class < T > type , Supplier < T > valueSupplier );2;0;3
SpringFactoriesLoader.toDistinctUnmodifiableList( String factoryType , List < String > implementations );1;0;3
KotlinDelegate.convertArgs( Object [ ] args , List < KParameter > parameters );4;6;11
FactoryInstantiator.findSingleConstructor( Constructor < ? > [ ] constructors );2;1;3
SpringFactoriesLoader.loadFactoriesResource( ClassLoader classLoader , String resourceLocation );3;0;20
KotlinDelegate.instantiate( KFunction < T > kotlinConstructor , Map < KParameter , Object > args );1;0;3
FactoryInstantiator.isKotlinType( Class < ? > factoryImplementationClass );2;1;3
SpringFactoriesLoader.handleMessage( BiConsumer < Supplier < String > , Throwable > messageHandler );1;0;7