Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
SimpleAsyncTaskExecutor.submitListenable( Callable < T > task );1;0;5
SimpleAsyncTaskExecutor.SimpleAsyncTaskExecutor( );1;0;3
SimpleAsyncTaskExecutor.submit( Runnable task );1;0;5
ConcurrencyThrottlingRunnable.run( );1;0;8
ConcurrencyThrottlingRunnable.ConcurrencyThrottlingRunnable( Runnable target );1;0;3
SimpleAsyncTaskExecutor.submitListenable( Runnable task );1;0;5
SimpleAsyncTaskExecutor.setThreadFactory( @ Nullable ThreadFactory threadFactory );1;0;3
SimpleAsyncTaskExecutor.execute( Runnable task , long startTimeout );4;3;11
ConcurrencyThrottleAdapter.afterAccess( );1;0;3
SimpleAsyncTaskExecutor.SimpleAsyncTaskExecutor( String threadNamePrefix );1;0;3
SimpleAsyncTaskExecutor.getConcurrencyLimit( );1;0;3
SimpleAsyncTaskExecutor.SimpleAsyncTaskExecutor( ThreadFactory threadFactory );1;0;3
ConcurrencyThrottleAdapter.beforeAccess( );1;0;3
SimpleAsyncTaskExecutor.getThreadFactory( );1;0;3
SimpleAsyncTaskExecutor.doExecute( Runnable task );2;1;4
SimpleAsyncTaskExecutor.submit( Callable < T > task );1;0;5
SimpleAsyncTaskExecutor.setConcurrencyLimit( int concurrencyLimit );1;0;3
SimpleAsyncTaskExecutor.execute( Runnable task );1;0;3
SimpleAsyncTaskExecutor.isThrottleActive( );1;0;3
SimpleAsyncTaskExecutor.setTaskDecorator( TaskDecorator taskDecorator );1;0;3