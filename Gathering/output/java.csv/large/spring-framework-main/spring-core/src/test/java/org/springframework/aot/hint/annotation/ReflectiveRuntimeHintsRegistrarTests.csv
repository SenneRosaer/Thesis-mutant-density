Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
SampleConstructorAnnotatedBean.SampleConstructorAnnotatedBean( String name );1;0;2
SampleMethodMetaAnnotatedBeanWithAlias.notManaged( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnField( );1;0;6
ReflectiveRuntimeHintsRegistrarTests.shouldInvokeCustomProcessor( );1;0;7
SampleMethodAnnotatedBeanWithInterface.managed( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnInheritedClass( );1;0;9
SampleMultipleCustomProcessors.managed( );1;0;3
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnConstructor( );1;0;7
SampleConstructorAnnotatedBean.SampleConstructorAnnotatedBean( Integer nameAsNumber );1;0;2
SampleMethodAnnotatedBean.notManaged( );1;0;2
SampleMethodMetaAnnotatedBeanWithAlias.invoke( );1;0;2
SampleCustomProcessor.managed( );1;0;3
TestTypeHintReflectiveProcessor.registerTypeHint( ReflectionHints hints , Class < ? > type );1;0;4
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnMethod( );1;0;6
SampleMethodMetaAnnotatedBean.notManaged( );1;0;2
SampleMethodAnnotatedBeanWithInheritance.notManaged( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnInterface( );1;0;9
SampleTypeAnnotatedBean.notManaged( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.shouldProcessWithMultipleProcessorsWithAnnotationOnType( );1;0;6
SampleMethodMetaAnnotatedBean.invoke( );1;0;2
SampleMethodAnnotatedBean.managed( );1;0;2
SampleInheritedClass.managed( );1;0;2
SampleMethodAnnotatedBeanWithInterface.notManaged( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.shouldIgnoreNonAnnotatedType( );1;0;5
TestMethodHintReflectiveProcessor.registerMethodHint( ReflectionHints hints , Method method );1;0;4
ReflectiveRuntimeHintsRegistrarTests.shouldProcessAnnotationOnType( );1;0;5
SampleMethodAnnotatedBeanWithInheritance.managed( );1;0;2
ReflectiveRuntimeHintsRegistrarTests.process( Class < ? > beanClass );1;0;3