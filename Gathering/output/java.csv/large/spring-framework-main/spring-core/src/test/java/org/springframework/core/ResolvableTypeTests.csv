Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
ResolvableTypeTests.resolveVariableGenericArrayUnknown( );1;0;6
ResolvableTypeTests.resolveTypeVariableFromConstructorParameterWithImplementsClass( );2;0;7
ResolvableTypeTests.forConstructorParameterMustNotBeNull( );1;0;5
ResolvableTypeTests.asSelf( );1;0;4
ResolvableTypeTests.forInstanceProvider( );1;0;5
ResolvableTypeTests.doesResolveFromOuterOwner( );1;0;6
ResolvableTypeTests.forClassWithGenerics( );1;0;7
ResolvableTypeTests.isAssignableFromForSameClassExtendsGenerics( );1;0;17
ResolvableTypeTests.forMethodParameterWithSameSignatureAndGenerics( );1;2;10
ResolvableTypeTests.forPrivateField( );1;0;14
ResolvableTypeTests.resolveTypeVariableFromMethodParameterTypeWithImplementsClass( );1;0;8
ResolvableTypeTests.serialize( );1;0;10
ResolvableTypeTests.genericOfGenericWithAs( );1;0;5
ResolvableTypeTests.forInstanceNull( );1;0;3
Constructors.Constructors( Map < T , Long > p );1;0;2
ResolvableTypeTests.resolveGenericArrayType( );1;0;6
ResolvableTypeTests.isAssignableFromCannotBeResolved( );1;0;7
ResolvableTypeTests.resolveWildcardTypeUpperBounds( );1;0;4
Constructors.Constructors( List < CharSequence > p );1;0;2
ResolvableTypeTests.spr16456( );1;0;6
ResolvableTypeTests.resolveTypeVariableFromSimpleSuperclassType( );1;0;5
ResolvableTypeTests.forMethodParameterByIndex( );1;0;5
ResolvableTypeTests.identifyTypeVariable( );1;0;10
ResolvableTypeTests.resolveTypeVariableFromType( );1;0;6
ResolvableTypeTests.resolveVariableFromInheritedFieldSwitched( );1;0;7
ResolvableTypeTests.resolveVariableFromFieldTypeUnknown( );1;0;5
ResolvableTypeTests.getSource( );2;0;13
ResolvableTypeTests.resolveGenericArrayFromGeneric( );1;0;7
ResolvableTypeTests.resolveTypeVariableFromMethodParameter( );1;0;6
ResolvableTypeTests.getComponentTypeForVariableThatResolvesToGenericArray( );1;0;7
ResolvableTypeTests.forInstanceProviderNull( );1;0;5
ResolvableTypeTests.resolveUnknownTypeVariableFromConstructorParameter( );2;0;6
ResolvableTypeTests.isAssignableFromForClassAndSimpleVariable( );1;0;17
ResolvableTypeTests.resolveClassType( );1;0;4
ResolvableTypeTests.testSerialization( ResolvableType type );1;0;12
ResolvableTypeTests.resolveTypeVariableFromSimpleInterfaceType( );1;0;5
ResolvableTypeTests.forRawClass( );1;0;7
ResolvableTypeAssert.ResolvableTypeAssert( ResolvableType actual );1;0;3
ResolvableTypeTests.noGetGenerics( );1;0;5
ResolvableTypeTests.genericArrayType( );1;0;4
ResolvableTypeTests.forMethodReturnMustNotBeNull( );1;0;5
ResolvableTypeTests.resolveTypeVariableFromDeclaredParameterizedTypeReference( );1;0;6
ResolvableTypeTests.getComponentTypeForGenericArrayType( );1;0;6
ResolvableTypeTests.resolveTypeVariableFromSimpleCollectionSuperclassType( );1;0;6
ResolvableTypeTests.getGeneric( );1;0;4
ResolvableTypeTests.classWithGenericsAs( );1;0;4
ResolvableTypeTests.noInterfaces( );1;0;3
ResolvableTypeTests.nested( );1;0;7
ResolvableTypeTests.resolveTypeVariableFromMethodReturn( );1;0;6
ResolvableTypeTests.resolveTypeVariableFromSuperType( );1;0;6
ResolvableTypeTests.resolveVariableFromFieldType( );1;0;5
ResolvableTypeTests.asFromInterface( );1;0;4
TypedConstructors.TypedConstructors( List < CharSequence > p );1;0;3
ResolvableTypeTests.asCollection( );1;0;5
ResolvableTypeTests.spr12701( );1;0;8
ResolvableTypeTests.hasUnresolvableGenericsWhenExtends( );2;0;7
ResolvableTypeTests.resolveFromOuterClass( );1;0;5
ResolvableTypeTests.wildcardType( );1;0;5
ResolvableTypeTests.forMethodReturn( );1;0;5
ResolvableTypeTests.parameterizedType( );1;0;4
ResolvableTypeTests.getGenericByIndex( );1;0;5
ResolvableTypeTests.resolveParameterizedType( );1;0;4
ResolvableTypeTests.spr11219( );1;0;5
ResolvableTypeTests.noSuperType( );1;0;4
ResolvableTypeTests.getComponentTypeForNonArray( );1;0;5
ResolvableTypeTests.resolveBoundedTypeVariableWildcardResult( );1;0;4
ResolvableTypeTests.resolveVariableFromInheritedField( );1;0;7
ResolvableTypeTests.hasUnresolvableGenericsWhenImplementesRawInterface( );2;0;7
ResolvableTypeTests.resolveTypeVariableFromMethodParameterTypeWithImplementsType( );1;0;8
ResolvableTypeTests.resolveTypeVariableFromReflectiveParameterizedTypeReference( );1;0;6
ResolvableTypeTests.isAssignableFromForSameClassNonExtendsGenerics( );1;0;7
ResolvableTypeTests.getComponentTypeForClassArray( );1;0;7
ResolvableTypeTests.forConstructorParameter( );1;0;5
ResolvableTypeTests.forMethodParameter( );1;0;6
MyGenericInterfaceType.MyGenericInterfaceType( Class < T > type );1;0;3
ResolvableTypeTests.getGenericsFromClass( );1;0;6
ResolvableTypeTests.isAssignableFromForClassAndClass( );1;0;20
ResolvableTypeTests.resolveVariableNotFound( );1;0;4
ResolvableTypeTests.resolveBoundedTypeVariableResult( );1;0;4
ResolvableTypeTests.classType( );1;0;4
MyGenericInterfaceType.getResolvableType( );2;1;6
ResolvableTypeTests.resolveTypeVariableFromClassWithImplementsClass( );1;0;6
ResolvableTypeAssert.isAssignableFrom( ResolvableType ... types );3;1;8
ResolvableTypeTests.javaDocSample( );1;0;12
ResolvableTypeTests.assertThatResolvableType( ResolvableType type );1;0;3
ResolvableTypeTests.resolveTypeVariableFromMethodParameterType( );1;0;7
ResolvableTypeTests.forRawClassWithNull( );1;0;7
ResolvableTypeTests.forClassWithMismatchedGenerics( );1;0;6
ResolvableTypeTests.resolveTypeVariableFromConstructorParameter( );2;0;6
ResolvableTypeTests.forInstanceNoProvider( );1;0;5
ResolvableTypeTests.hasGenerics( );1;0;5
ResolvableTypeTests.isAssignableFromForNone( );1;0;5
ResolvableTypeTests.hasUnresolvableGenericsWhenSelfNotResolvable( );1;0;4
ResolvableTypeTests.noneReturnValues( );1;0;21
ResolvableTypeTests.forField( String field );1;0;3
ResolvableTypeTests.forClassWithNull( );1;0;7
ResolvableTypeTests.isAssignableFromForWildcards( );1;0;24
ResolvableTypeTests.resolveTypeVariableFromMethodParameterWithImplementsClass( );1;0;6
ResolvableTypeTests.getGenericOutOfBounds( );1;0;6
ResolvableTypeTests.asNotFound( );1;0;4
ResolvableTypeTests.forField( );1;0;5
ResolvableTypeTests.forMethodParameterByIndexMustNotBeNull( );1;0;5
ResolvableTypeTests.asFromSuperType( );1;0;4
ResolvableTypeTests.isAssignableFromMustNotBeNull( );1;0;5
ResolvableTypeTests.getGenericOfGenericByIndexes( );1;0;4
ResolvableTypeTests.resolveFromClassWithGenerics( );1;0;8
ResolvableTypeTests.resolveArrayClassType( );1;0;4
ResolvableTypeTests.resolveTypeVariableFromMethodReturnWithImplementsClass( );1;0;6
ResolvableTypeTests.getSuperType( );1;0;10
ResolvableTypeTests.hashCodeAndEquals( );1;0;13
ResolvableTypeTests.resolveTypeVariableFromTypeWithVariableResolver( );1;0;7
TypedConstructors.TypedConstructors( Map < String , Long > p );1;0;3
ResolvableTypeTests.forMethodParameterWithNesting( );1;0;9
ResolvableTypeTests.asFromInheritedSuperType( );1;0;4
ResolvableTypeTests.getInterfaces( );2;0;11
ResolvableTypeTests.forTypedField( String field );1;0;3
ResolvableTypeTests.isAssignableFromForDifferentClassesWithGenerics( );1;0;12
ResolvableTypeTests.hasUnresolvableGenerics( );1;0;4
ResolvableTypeTests.isAssignableFromForArrays( );1;0;10
ResolvableTypeTests.resolveTypeVariableFromFieldTypeWithImplementsType( );1;0;8
ResolvableTypeTests.resolveVariableGenericArrayUnknownWithFallback( );1;0;6
ResolvableTypeTests.asMap( );1;0;6
ResolvableTypeTests.toStrings( );1;0;22
ResolvableTypeTests.resolveTypeVariableFromSimpleCollectionInterfaceType( );1;0;6
ResolvableTypeTests.forRawClassAssignableFromTypeVariable( );1;0;10
ResolvableTypeTests.asFromInheritedInterface( );1;0;4
ResolvableTypeTests.resolveTypeVariableFromFieldTypeWithImplementsClass( );1;0;6
ResolvableTypeTests.typeVariableType( );1;0;4
ResolvableTypeTests.spr14648( );1;0;7
ResolvableTypeTests.forArrayComponent( );1;0;6
ResolvableTypeAssert.isNotAssignableFrom( ResolvableType ... types );3;0;8
ResolvableTypeTests.forClass( );1;0;7
ResolvableTypeTests.forMethodParameterMustNotBeNull( );1;0;5
ResolvableTypeTests.resolveWildcardLowerBounds( );1;0;4
ResolvableTypeTests.getGenericsFromParameterizedType( );1;0;6
ResolvableTypeAssert.describe( ResolvableType type );3;2;9
ResolvableTypeTests.canResolveVoid( );1;0;4
ResolvableTypeTests.forMethodParameterWithNestingAndLevels( );1;0;10
ResolvableTypeTests.forFieldMustNotBeNull( );1;0;5
ResolvableTypeTests.getGenericOfGeneric( );1;0;5
ResolvableTypeTests.resolveTypeWithCustomVariableResolver( );1;0;15
ResolvableTypeTests.isAssignableFromForComplexWildcards( );1;0;10
ResolvableTypeTests.hasUnresolvableGenericsBasedOnOwnGenerics( );1;0;4
ResolvableTypeTests.resolveVariableGenericArray( );1;0;6
ResolvableTypeTests.narrow( );1;0;5
ResolvableTypeTests.arrayClassType( );1;0;5
ResolvableTypeTests.nestedWithArray( );1;0;6
ResolvableTypeTests.getResolvedGenerics( );2;0;6
ResolvableTypeTests.nestedWithIndexes( );1;0;7
ResolvableTypeTests.resolveGenericMultiArrayType( );1;0;5