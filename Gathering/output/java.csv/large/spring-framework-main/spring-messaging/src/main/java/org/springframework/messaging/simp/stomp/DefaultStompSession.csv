Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
DefaultSubscription.unsubscribe( @ Nullable StompHeaders headers );2;1;7
DefaultStompSession.createMessage( StompHeaderAccessor accessor , @ Nullable Object payload );3;1;17
DefaultStompSession.getConnectHeaders( );1;0;5
DefaultStompSession.subscribe( StompHeaders headers , StompFrameHandler handler );2;1;16
DefaultSubscription.getHandler( );1;0;3
DefaultStompSession.DefaultStompSession( StompSessionHandler sessionHandler , StompHeaders connectHeaders );1;0;7
DefaultStompSession.setMessageConverter( MessageConverter messageConverter );1;0;4
DefaultSubscription.DefaultSubscription( StompHeaders headers , StompFrameHandler handler );1;0;8
ReceiptHandler.addReceiptLostTask( Runnable task );3;2;12
DefaultStompSession.resetConnection( );4;1;11
DefaultStompSession.isAutoReceiptEnabled( );1;0;3
DefaultSubscription.unsubscribe( );1;0;3
DefaultStompSession.getSessionHandler( );1;0;3
DefaultStompSession.getMessageConverter( );1;0;3
ReceiptHandler.handleReceiptReceived( StompHeaders receiptHeaders );1;0;3
DefaultStompSession.acknowledge( String messageId , boolean consumed );2;0;10
DefaultStompSession.checkOrAddReceipt( StompHeaders headers );3;2;8
DefaultStompSession.getTaskScheduler( );1;0;3
ReceiptHandler.handleInternal( boolean result , @ Nullable StompHeaders receiptHeaders );6;2;31
ReceiptHandler.initReceiptHandling( );1;0;6
DefaultStompSession.afterConnectFailure( Throwable ex );2;0;7
DefaultStompSession.afterConnectionClosed( );3;1;9
DefaultStompSession.getSessionId( );1;0;3
ReceiptHandler.handleReceiptNotReceived( );1;0;3
DefaultSubscription.toString( );1;0;5
ReceiptHandler.addReceiptTask( Runnable task );1;0;3
DefaultStompSession.handleMessage( Message < byte [ ] > message );13;5;51
DefaultStompSession.createHeaderAccessor( StompCommand command );1;0;6
DefaultStompSession.initHeartbeatTasks( StompHeaders connectedHeaders );7;11;17
DefaultStompSession.send( StompHeaders headers , Object payload );1;0;10
ReadInactivityTask.run( );2;0;9
ReceiptHandler.ReceiptHandler( @ Nullable String receiptId );2;1;6
ReceiptHandler.addReceiptTask( Consumer < StompHeaders > task );3;1;13
DefaultStompSession.setReceiptTimeLimit( long receiptTimeLimit );1;1;4
WriteInactivityTask.run( );3;2;10
DefaultStompSession.invokeHandler( StompFrameHandler handler , Message < byte [ ] > message , StompHeaders headers );5;3;18
DefaultStompSession.setAutoReceipt( boolean autoReceiptEnabled );1;0;3
DefaultSubscription.getSubscriptionHeaders( );1;0;3
DefaultSubscription.getSubscriptionId( );1;0;3
DefaultStompSession.afterConnected( TcpConnection < byte [ ] > connection );3;1;13
DefaultStompSession.disconnect( @ Nullable StompHeaders headers );2;1;14
DefaultStompSession.handleFailure( Throwable ex );3;0;11
DefaultStompSession.disconnect( );1;0;3
DefaultStompSession.unsubscribe( String id , @ Nullable StompHeaders headers );2;1;9
DefaultStompSession.getSession( );1;0;3
ReceiptHandler.getReceiptId( );1;0;3
DefaultStompSession.isConnected( );1;1;3
DefaultStompSession.subscribe( String destination , StompFrameHandler handler );1;0;5
DefaultStompSession.setTaskScheduler( @ Nullable TaskScheduler taskScheduler );1;0;3
DefaultStompSession.send( String destination , Object payload );1;0;5
DefaultStompSession.execute( Message < byte [ ] > message );5;2;19
DefaultStompSession.acknowledge( StompHeaders headers , boolean consumed );2;0;10
DefaultStompSession.getReceiptTimeLimit( );1;0;3