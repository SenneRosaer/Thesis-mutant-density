Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
ReadOnlyMap.ReadOnlyMap( Map < ? extends K , ? extends V > map );1;0;4
AbstractPropertyAccessorTests.setIndexedPropertyIgnored( );1;0;6
AbstractPropertyAccessorTests.setNestedDeepProperty( );1;0;6
Address.Address( String city , String country );1;0;4
NumberPropertyBean.getMyByte( );1;0;3
AbstractPropertyAccessorTests.getAndSetIndexedProperties( );1;0;67
AbstractPropertyAccessorTests.getPropertyIntermediatePropertyIsNullWithAutoGrow( );1;0;7
NumberPropertyBean.getMyFloat( );1;0;3
ArrayToObject.setObject( Object object );1;0;3
Country.Country( );1;0;3
AbstractPropertyAccessorTests.setWildcardEnumProperty( );1;0;6
Foo.getList( );1;0;3
EnumConsumer.setEnumValue( Enum < TestEnum > enumValue );1;0;3
AbstractPropertyAccessorTests.setMapPropertyWithTypeConversion( );2;0;25
AbstractPropertyAccessorTests.setValue( Object value );1;3;3
PrimitiveArrayBean.getArray( );1;0;3
AbstractPropertyAccessorTests.setPropertyWithPrimitiveConversion( );1;0;8
Employee.getCompany( );1;0;3
AbstractPropertyAccessorTests.setValidPropertyValues( );1;1;15
AbstractPropertyAccessorTests.setNumberPropertiesWithCoercion( );1;0;25
NumberPropertyBean.setMyByte( Byte myByte );1;0;3
AbstractPropertyAccessorTests.setGenericEnumProperty( );1;0;6
AbstractPropertyAccessorTests.isReadablePropertyNoSuchProperty( );1;0;4
AbstractPropertyAccessorTests.getPropertyIntermediatePropertyIsNull( );1;0;11
NumberPropertyBean.getMyDouble( );1;0;3
NumberPropertyBean.setMyFloat( Float myFloat );1;0;3
PropsTester.setName( String name );1;0;3
Simple.getInteger( );1;0;3
AbstractPropertyAccessorTests.setIntArrayPropertyWithCustomEditor( );1;0;20
AbstractPropertyAccessorTests.setMapPropertyWithUnmodifiableMap( );2;0;21
AbstractPropertyAccessorTests.setRawMapPropertyWithNoEditorRegistered( );1;0;13
AbstractPropertyAccessorTests.setMapPropertyWithCustomUnmodifiableMap( );2;0;21
SkipReaderStub.SkipReaderStub( T ... items );1;0;3
AbstractPropertyAccessorTests.setUnknownNestedProperty( );1;0;6
Simple.Simple( String name , Integer integer );1;0;4
AbstractPropertyAccessorTests.isWritablePropertyNull( );1;0;4
Simple.getName( );1;0;3
PropsTester.setStringArray( String [ ] sa );1;0;3
AbstractPropertyAccessorTests.setCollectionPropertyWithStringValueAndCustomEditor( );1;0;17
WildcardEnumConsumer.getEnumValue( );1;0;3
AbstractPropertyAccessorTests.propertyTypeUnknownProperty( );1;0;5
AbstractPropertyAccessorTests.setUnknownProperty( );1;0;11
AbstractPropertyAccessorTests.setStringArrayProperty( );1;0;18
AbstractPropertyAccessorTests.setGenericArrayProperty( );1;0;7
AbstractPropertyAccessorTests.setUnknownOptionalProperty( );1;0;7
AbstractPropertyAccessorTests.setUnknownPropertyWithPossibleMatches( );1;0;10
AbstractPropertyAccessorTests.setPrimitiveProperties( );1;0;34
AbstractPropertyAccessorTests.setPropertyIntermediateListIsNullWithBadConversionService( );1;0;13
NumberPropertyBean.setMyPrimitiveDouble( double myPrimitiveDouble );1;0;3
AbstractPropertyAccessorTests.setPropertyIsReflectedImmediately( );1;0;9
AbstractPropertyAccessorTests.propertyType( );1;0;5
AbstractPropertyAccessorTests.setPrimitiveArrayProperty( );1;0;6
Person.Person( String name , Address address );1;0;4
NumberPropertyBean.getMyPrimitiveByte( );1;0;3
Address.getCity( );1;0;3
AbstractPropertyAccessorTests.getAnotherNestedDeepProperty( );1;3;13
AbstractPropertyAccessorTests.setEmptyValueForPrimitiveProperty( );1;0;6
AbstractPropertyAccessorTests.setCollectionPropertyNonMatchingType( );1;0;24
NumberPropertyBean.setMyLong( Long myLong );1;0;3
AbstractPropertyAccessorTests.setNestedPropertyPolymorphic( );1;2;16
AbstractPropertyAccessorTests.isReadablePropertyNull( );1;0;4
NumberPropertyBean.getMyPrimitiveDouble( );1;0;3
AbstractPropertyAccessorTests.setStringArrayPropertyWithCustomStringDelimiter( );1;0;7
Address.Address( );1;0;3
AbstractPropertyAccessorTests.setAnotherNestedProperty( );1;4;15
WildcardEnumConsumer.setEnumValue( Enum < ? > enumValue );1;0;3
AbstractPropertyAccessorTests.isWritableProperty( );1;0;4
AbstractPropertyAccessorTests.setAnotherPropertyIntermediatePropertyIsNull( );1;0;7
ReadOnlyMap.put( K key , V value );2;0;8
ReadOnlyMap.ReadOnlyMap( );1;0;3
StringArrayBean.setArray( String [ ] array );1;0;3
AbstractPropertyAccessorTests.propertyTypeDescriptor( );1;0;5
AbstractPropertyAccessorTests.getSimpleProperty( );1;0;5
AbstractPropertyAccessorTests.createWithNullTarget( );1;0;3
Address.getCountry( );1;0;3
SkipReaderStub.setItems( T ... items );1;0;3
AbstractPropertyAccessorTests.setStringArrayPropertyWithStringSplitting( );1;0;7
AbstractPropertyAccessorTests.isReadableWritableForIndexedProperties( );1;0;40
AbstractPropertyAccessorTests.setPropertyTypeMismatch( );1;0;6
Simple.setName( String name );1;0;3
AbstractPropertyAccessorTests.getNestedProperty( );1;0;5
Person.getAddress( );1;0;3
AbstractPropertyAccessorTests.cornerSpr10115( );1;0;6
Person.getName( );1;0;3
Person.setName( String name );1;0;3
AbstractPropertyAccessorTests.setBooleanProperty( );1;1;10
AbstractPropertyAccessorTests.setPropertyValuesIgnoresInvalidNestedOnRequest( );1;0;12
AbstractPropertyAccessorTests.setMapProperty( );7;0;12
AbstractPropertyAccessorTests.setYetAnotherNestedProperties( );1;0;10
AbstractPropertyAccessorTests.setPropertyInProtectedBaseBean( );1;0;7
Foo.getListOfMaps( );1;0;3
AbstractPropertyAccessorTests.isReadablePropertyNotReadable( );1;0;4
AbstractPropertyAccessorTests.setIntArrayProperty( );1;0;24
Foo.setList( List list );1;0;3
EnumTester.setAutowire( Autowire autowire );1;0;3
ReadOnlyMap.entrySet( );1;0;4
AbstractPropertyAccessorTests.setStringArrayPropertyWithCustomStringEditor( );1;0;23
Employee.setCompany( String co );1;0;3
AbstractPropertyAccessorTests.setCollectionPropertyWithStringValue( );1;0;19
AbstractPropertyAccessorTests.setPrimitiveArrayPropertyLargeMatchingWithIndexSpecificEditor( );2;1;18
Spr13837Bean.getSomething( );1;0;3
NumberPropertyBean.setMyPrimitiveInt( int myPrimitiveInt );1;0;3
AbstractPropertyAccessorTests.setIntArrayPropertyWithStringSplitting( );1;0;7
NumberPropertyBean.setMyShort( Short myShort );1;0;3
AbstractPropertyAccessorTests.setPropertyIntermediateListIsNullWithNoConversionService( );1;0;7
ArrayToObject.getObject( );1;0;3
StringArrayBean.getArray( );1;0;3
AbstractPropertyAccessorTests.setNumberProperties( );1;0;25
Person.Person( );1;0;2
AbstractPropertyAccessorTests.setSimpleProperty( );1;0;7
NumberPropertyBean.setMyPrimitiveShort( short myPrimitiveShort );1;0;3
AbstractPropertyAccessorTests.setNestedProperty( );1;0;6
ReadOnlyMap.isAccessed( );1;0;3
Country.Country( String name );1;0;3
AbstractPropertyAccessorTests.setCollectionPropertyWithArrayValue( );1;0;24
NumberPropertyBean.setMyPrimitiveLong( long myPrimitiveLong );1;0;3
AbstractPropertyAccessorTests.propertyTypeDescriptorUnknownProperty( );1;0;5
Spr13837Bean.setSomething( final Integer something );1;0;4
AbstractPropertyAccessorTests.setEnumProperty( );1;0;10
AbstractPropertyAccessorTests.setCollectionPropertyWithIntArrayValue( );1;0;24
Address.setCountry( Country country );1;0;3
AbstractPropertyAccessorTests.convert( @ Nullable Object source , @ Nullable TypeDescriptor sourceType , TypeDescriptor targetType );1;0;3
Foo.setListOfMaps( List < Map > listOfMaps );1;0;3
NumberPropertyBean.getMyPrimitiveLong( );1;0;3
AbstractPropertyAccessorTests.setPrimitiveArrayPropertyWithAutoGrow( );1;0;9
AbstractPropertyAccessorTests.setPropertyIntermediateListIsNullWithAutoGrow( );1;0;10
AbstractPropertyAccessorTests.getUnknownNestedProperty( );1;0;6
NumberPropertyBean.getMyInteger( );1;0;3
EnumTester.getAutowire( );1;0;3
AbstractPropertyAccessorTests.setStringPropertyWithCustomEditor( );3;0;21
AbstractPropertyAccessorTests.getNestedDeepProperty( );1;0;5
AbstractPropertyAccessorTests.setStringArrayWithAutoGrow( );1;0;9
AbstractPropertyAccessorTests.testErrorMessageOfNestedProperty( );2;0;13
AbstractPropertyAccessorTests.getPropertyIntermediateMapEntryIsNullWithAutoGrow( );1;0;8
NumberPropertyBean.getMyPrimitiveInt( );1;0;3
AbstractPropertyAccessorTests.setPropertyToNull( );1;0;12
NumberPropertyBean.setMyPrimitiveByte( byte myPrimitiveByte );1;0;3
NumberPropertyBean.getMyPrimitiveShort( );1;0;3
NumberPropertyBean.setMyDouble( Double myDouble );1;0;3
PropsTester.setProperties( Properties p );1;0;3
NumberPropertyBean.getMyShort( );1;0;3
AbstractPropertyAccessorTests.setPropertyIntermediatePropertyIsNull( );1;0;12
ReadOnlyMap.keySet( );1;0;4
AbstractPropertyAccessorTests.getUnknownProperty( );1;0;10
PropsTester.setIntArray( int [ ] intArray );1;0;3
AbstractPropertyAccessorTests.setAsText( String text );1;4;3
NumberPropertyBean.setMyInteger( Integer myInteger );1;0;3
Address.setCity( String city );1;0;3
NumberPropertyBean.setMyPrimitiveFloat( float myPrimitiveFloat );1;0;3
NumberPropertyBean.getMyLong( );1;0;3
AbstractPropertyAccessorTests.setArrayPropertyToObject( );1;0;10
Person.setAddress( Address address );1;0;3
SkipReaderStub.SkipReaderStub( );1;0;2
AbstractPropertyAccessorTests.setPrimitiveArrayPropertyLargeMatchingWithSpecificEditor( );2;1;16
NoRead.setAge( int age );1;0;2
AbstractPropertyAccessorTests.setMapPropertyNonMatchingType( );1;0;14
ReadOnlyMap.size( );1;0;4
NumberPropertyBean.getMyPrimitiveFloat( );1;0;3
AbstractPropertyAccessorTests.setIndividualValidPropertyValues( );1;1;13
Country.setName( String name );1;0;3
AbstractPropertyAccessorTests.setEmptyPropertyValues( );1;2;13
PrimitiveArrayBean.setArray( int [ ] array );1;0;3
AbstractPropertyAccessorTests.getAndSetIndexedPropertiesWithDirectAccess( );1;0;56
AbstractPropertyAccessorTests.isWritablePropertyNoSuchProperty( );1;0;4
AbstractPropertyAccessorTests.cornerSpr13837( );1;0;6
AbstractPropertyAccessorTests.createPerson( String name , String city , String country );1;0;3
AbstractPropertyAccessorTests.setPropertiesProperty( );1;0;13
AbstractPropertyAccessorTests.isReadableProperty( );1;0;4
AbstractPropertyAccessorTests.setPropertyIntermediatePropertyIsNullWithAutoGrow( );1;0;8
AbstractPropertyAccessorTests.setPropertyWithCustomEditor( );1;0;14
Spr10115Bean.setProp1( String prop1 );1;0;3
Country.getName( );1;0;3
AbstractPropertyAccessorTests.propertyTypeIndexedProperty( );1;0;11
AbstractPropertyAccessorTests.setCollectionProperty( );2;0;20
AbstractPropertyAccessorTests.setCollectionPropertyWithIntegerValue( );1;0;24
EnumConsumer.getEnumValue( );1;0;3
Simple.setInteger( Integer integer );1;0;3