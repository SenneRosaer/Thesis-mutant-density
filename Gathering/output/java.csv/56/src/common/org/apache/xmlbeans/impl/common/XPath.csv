Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
ExecutionContext.ExecutionContext( );1;0;3
CompilationContext.tokenize( String s1 , String s2 );5;8;17
PathContext.top( int i );1;2;3
CompilationContext.tokenizeNCName( );3;1;10
CompilationContext.tokenize( String s1 , String s2 , String s3 );8;13;25
PathContext.backtrack( );5;6;20
CompilationContext.addStep( boolean deep , boolean attr , QName name , Step steps );3;2;11
Step.match( QName name );6;5;23
CompilationContext.getAnyQName( );1;0;3
Step.isWild( );1;1;3
CompilationContext.tokenizeQName( );4;1;11
CompilationContext.tokenizeQuotedUri( );7;4;24
CompilationContext.compile( String expr );1;0;7
CompilationContext.parseWhitespace( );2;0;9
XPathCompileException.XPathCompileException( XmlError err );1;0;3
CompilationContext.computeBacktrack( Step steps );23;39;70
CompilationContext.CompilationContext( Map namespaces , String currentNodeVar );4;4;12
CompilationContext.isNCNameStart( );2;2;6
CompilationContext.processNonXpathDecls( );1;0;2
PathContext.attr( QName name );3;3;3
CompilationContext.tokenizePath( ArrayList paths );5;4;20
CompilationContext.lookupPrefix( String prefix );9;0;19
XPath.compileXPath( String xpath );1;0;3
PathContext.init( Step steps );1;0;4
CompilationContext.isNCName( );2;2;6
PathContext.end( );1;1;3
ExecutionContext.attr( QName name );2;3;6
XPath.XPath( Selector selector , boolean sawDeepDot );1;0;4
CompilationContext.currChar( );1;0;3
ExecutionContext.element( QName name );2;4;8
ExecutionContext.start( );2;3;6
Selector.Selector( Step [ ] paths );1;0;3
PathContext.element( QName name );10;8;27
XPath.compileXPath( String xpath , String currentNodeVar );1;0;3
CompilationContext.isWhitespace( );1;0;3
XPath.compileXPath( String xpath , String currentNodeVar , Map namespaces );1;0;5
CompilationContext.tokenizeSteps( );18;6;53
PathContext.PathContext( );1;0;3
CompilationContext.startsWith( String s , int offset );2;3;5
PathContext.start( );2;3;8
CompilationContext.advance( );8;16;19
CompilationContext.startsWith( String s );1;0;3
CompilationContext.advance( int count );2;3;5
CompilationContext.currChar( int offset );2;4;6
CompilationContext.tokenizeSelector( );2;0;7
XPath.compileXPath( String xpath , Map namespaces );1;0;3
CompilationContext.tokenizeXPath( );14;7;61
CompilationContext.tokenize( String s );3;4;11
CompilationContext.tokenize( String s1 , String s2 , String s3 , String s4 );9;16;29
ExecutionContext.init( XPath xpath );4;5;12
Step.Step( boolean deep , boolean attr , QName name );4;4;11
XPath.sawDeepDot( );1;0;3
CompilationContext.isWhitespace( int offset );4;7;4
ExecutionContext.end( );2;3;5
CompilationContext.newError( String msg );1;0;7