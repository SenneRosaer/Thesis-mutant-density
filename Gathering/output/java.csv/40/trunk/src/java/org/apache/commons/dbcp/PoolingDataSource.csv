Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
PoolGuardConnectionWrapper.isReadOnly( );1;0;4
PoolGuardConnectionWrapper.prepareCall( String sql , int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolingDataSource.PoolingDataSource( );1;0;3
PoolGuardConnectionWrapper.getCatalog( );1;0;4
PoolingDataSource.setLogWriter( PrintWriter out );1;0;3
PoolingDataSource.setPool( ObjectPool pool );3;2;9
PoolGuardConnectionWrapper.rollback( java . sql . Savepoint savepoint );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int autoGeneratedKeys );1;0;4
PoolGuardConnectionWrapper.getAutoCommit( );1;0;4
PoolGuardConnectionWrapper.commit( );1;0;4
PoolingDataSource.getLogWriter( );1;0;3
PoolingDataSource.isAccessToUnderlyingConnectionAllowed( );1;0;3
PoolGuardConnectionWrapper.PoolGuardConnectionWrapper( Connection delegate );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql );1;0;4
PoolGuardConnectionWrapper.checkOpen( );2;1;5
PoolingDataSource.getConnection( String uname , String passwd );1;0;3
PoolingDataSource.getLoginTimeout( );1;0;3
PoolGuardConnectionWrapper.prepareCall( String sql );1;0;4
PoolGuardConnectionWrapper.isClosed( );2;1;6
PoolGuardConnectionWrapper.getHoldability( );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , String [ ] columnNames );1;0;4
PoolGuardConnectionWrapper.equals( Object obj );5;3;19
PoolGuardConnectionWrapper.setReadOnly( boolean readOnly );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.createStatement( int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolGuardConnectionWrapper.getTransactionIsolation( );1;0;4
PoolGuardConnectionWrapper.setTypeMap( Map map );1;0;4
PoolGuardConnectionWrapper.close( );2;1;7
PoolGuardConnectionWrapper.hashCode( );2;1;6
PoolingDataSource.setAccessToUnderlyingConnectionAllowed( boolean allow );1;0;3
PoolingDataSource.PoolingDataSource( ObjectPool pool );1;0;3
PoolGuardConnectionWrapper.setCatalog( String catalog );1;0;4
PoolGuardConnectionWrapper.getWarnings( );1;0;4
PoolGuardConnectionWrapper.getTypeMap( );1;0;4
PoolGuardConnectionWrapper.toString( );2;1;6
PoolGuardConnectionWrapper.prepareStatement( String sql , int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolGuardConnectionWrapper.releaseSavepoint( java . sql . Savepoint savepoint );1;0;4
PoolGuardConnectionWrapper.setHoldability( int holdability );1;0;4
PoolGuardConnectionWrapper.getMetaData( );1;0;4
PoolGuardConnectionWrapper.prepareCall( String sql , int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.getInnermostDelegate( );2;0;7
PoolGuardConnectionWrapper.nativeSQL( String sql );1;0;4
PoolGuardConnectionWrapper.createStatement( );1;0;4
PoolGuardConnectionWrapper.setAutoCommit( boolean autoCommit );1;0;4
PoolGuardConnectionWrapper.innermostDelegateEquals( Connection c );2;2;8
PoolGuardConnectionWrapper.clearWarnings( );1;0;4
PoolGuardConnectionWrapper.setTransactionIsolation( int level );1;0;4
PoolGuardConnectionWrapper.getDelegate( );2;0;7
PoolingDataSource.setLoginTimeout( int seconds );1;0;3
PoolGuardConnectionWrapper.setSavepoint( );1;0;4
PoolingDataSource.getConnection( );6;1;17
PoolGuardConnectionWrapper.rollback( );1;0;4
PoolGuardConnectionWrapper.createStatement( int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int [ ] columnIndexes );1;0;4
PoolGuardConnectionWrapper.setSavepoint( String name );1;0;4