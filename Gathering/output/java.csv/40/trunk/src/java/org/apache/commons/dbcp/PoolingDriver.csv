Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
PoolGuardConnectionWrapper.isReadOnly( );1;0;4
PoolingDriver.closePool( String name );3;1;12
PoolingDriver.getConnectionPool( String name );8;4;33
PoolGuardConnectionWrapper.prepareCall( String sql , int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolGuardConnectionWrapper.getCatalog( );1;0;4
PoolingDriver.getMajorVersion( );1;0;3
PoolingDriver.registerPool( String name , ObjectPool pool );1;0;3
PoolingDriver.getPoolNames( );1;0;4
PoolGuardConnectionWrapper.rollback( java . sql . Savepoint savepoint );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int autoGeneratedKeys );1;0;4
PoolingDriver.connect( String url , Properties info );8;2;26
PoolGuardConnectionWrapper.getAutoCommit( );1;0;4
PoolingDriver.getMinorVersion( );1;0;3
PoolGuardConnectionWrapper.commit( );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql );1;0;4
PoolGuardConnectionWrapper.checkOpen( );2;1;5
PoolGuardConnectionWrapper.prepareCall( String sql );1;0;4
PoolGuardConnectionWrapper.isClosed( );2;1;6
PoolGuardConnectionWrapper.getHoldability( );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , String [ ] columnNames );1;0;4
PoolingDriver.jdbcCompliant( );1;0;3
PoolingDriver.PoolingDriver( );1;0;2
PoolGuardConnectionWrapper.equals( Object obj );2;1;6
PoolGuardConnectionWrapper.setReadOnly( boolean readOnly );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.createStatement( int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolGuardConnectionWrapper.getTransactionIsolation( );1;0;4
PoolGuardConnectionWrapper.setTypeMap( Map map );1;0;4
PoolGuardConnectionWrapper.close( );2;1;7
PoolGuardConnectionWrapper.hashCode( );2;1;6
PoolGuardConnectionWrapper.setCatalog( String catalog );1;0;4
PoolingDriver.getPropertyInfo( String url , Properties info );1;0;3
PoolGuardConnectionWrapper.getWarnings( );1;0;4
PoolGuardConnectionWrapper.getTypeMap( );1;0;4
PoolGuardConnectionWrapper.toString( );2;1;6
PoolGuardConnectionWrapper.prepareStatement( String sql , int resultSetType , int resultSetConcurrency , int resultSetHoldability );1;0;4
PoolGuardConnectionWrapper.releaseSavepoint( java . sql . Savepoint savepoint );1;0;4
PoolGuardConnectionWrapper.setHoldability( int holdability );1;0;4
PoolGuardConnectionWrapper.getMetaData( );1;0;4
PoolGuardConnectionWrapper.prepareCall( String sql , int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.getInnermostDelegate( );2;0;7
PoolingDriver.isAccessToUnderlyingConnectionAllowed( );1;0;3
PoolGuardConnectionWrapper.nativeSQL( String sql );1;0;4
PoolGuardConnectionWrapper.createStatement( );1;0;4
PoolGuardConnectionWrapper.setAutoCommit( boolean autoCommit );1;0;4
PoolingDriver.invalidateConnection( Connection conn );3;0;16
PoolingDriver.setAccessToUnderlyingConnectionAllowed( boolean allow );1;0;3
PoolGuardConnectionWrapper.clearWarnings( );1;0;4
PoolGuardConnectionWrapper.setTransactionIsolation( int level );1;0;4
PoolGuardConnectionWrapper.getDelegate( );2;0;7
PoolingDriver.getPool( String name );2;0;8
PoolGuardConnectionWrapper.setSavepoint( );1;0;4
PoolGuardConnectionWrapper.rollback( );1;0;4
PoolGuardConnectionWrapper.createStatement( int resultSetType , int resultSetConcurrency );1;0;4
PoolGuardConnectionWrapper.prepareStatement( String sql , int [ ] columnIndexes );1;0;4
PoolGuardConnectionWrapper.setSavepoint( String name );1;0;4
PoolingDriver.acceptsURL( String url );2;0;7
PoolGuardConnectionWrapper.PoolGuardConnectionWrapper( ObjectPool pool , Connection delegate );1;0;5