Method Name;Cyclomatic Complexity;Mutant Density;Source Lines of Code
Path.getCanonicalPath( );3;1;9
Path.checkFormat( String jcrPath );1;0;3
Path.getAncestor( int degree );4;4;14
CurrentElement.toJCRName( NamespaceResolver resolver , StringBuffer buf );1;0;3
Path.isAbsolute( );1;0;3
PathBuilder.addFirst( QName name );1;0;3
PathBuilder.PathBuilder( PathElement [ ] elements );1;0;4
Path.Path( PathElement [ ] elements , boolean isNormalized );3;3;8
Path.hashCode( );3;5;11
PathBuilder.addLast( PathElement elem );3;6;5
PathBuilder.addFirst( PathElement elem );4;8;10
CurrentElement.toJCRName( NamespaceResolver resolver );1;0;3
Path.isAncestorOf( Path other );7;6;22
CurrentElement.denotesName( );1;0;3
CurrentElement.denotesRoot( );1;0;3
RootElement.denotesParent( );1;0;3
Path.equals( Object obj );3;1;10
ParentElement.toString( );1;0;3
NameElement.denotesCurrent( );1;0;3
PathElement.getNormalizedIndex( );2;1;7
ParentElement.denotesRoot( );1;0;3
PathBuilder.getPath( );2;1;7
Path.create( String jcrPath , NamespaceResolver resolver , boolean normalize );2;0;8
PathElement.getName( );1;0;3
PathBuilder.PathBuilder( );1;0;3
Path.getDepth( );4;5;11
PathElement.create( QName name );5;1;13
Path.isCanonical( );2;1;3
RootElement.toString( );1;0;3
RootElement.toJCRName( NamespaceResolver resolver , StringBuffer buf );1;0;2
PathBuilder.addAll( PathElement [ ] elements );2;2;5
ParentElement.denotesCurrent( );1;0;3
ParentElement.denotesParent( );1;0;3
PathElement.equals( Object obj );4;3;11
PathElement.fromString( String s );9;7;31
NameElement.denotesName( );1;0;3
PathElement.PathElement( QName name , int index );1;0;4
PathElement.toJCRName( NamespaceResolver resolver , StringBuffer buf );2;1;9
ParentElement.denotesName( );1;0;3
Path.getAncestorCount( );1;1;3
Path.getElement( int i );1;0;3
ParentElement.toJCRName( NamespaceResolver resolver );1;0;3
NameElement.denotesParent( );1;0;3
Path.getNormalizedPath( );9;5;29
Path.create( Path parent , QName name , boolean normalize );2;0;10
RootElement.denotesCurrent( );1;0;3
CurrentElement.denotesParent( );1;0;3
RootElement.RootElement( );1;0;3
Path.getElements( );1;0;3
PathElement.toJCRName( NamespaceResolver resolver );1;0;5
ParentElement.ParentElement( );1;0;3
Path.isNormalized( );1;0;3
PathElement.toString( );2;1;11
RootElement.denotesName( );1;0;3
PathBuilder.addLast( QName name );1;0;3
ParentElement.toJCRName( NamespaceResolver resolver , StringBuffer buf );1;0;3
PathElement.hashCode( );1;4;6
Path.getLength( );1;0;3
Path.create( QName name , int index );3;3;12
NameElement.denotesRoot( );1;0;3
Path.denotesRoot( );2;2;3
PathElement.getIndex( );1;0;3
Path.valueOf( String s );7;12;26
PathBuilder.PathBuilder( Path parent );1;0;4
PathElement.create( QName name , int index );6;4;14
PathBuilder.addFirst( QName name , int index );1;0;3
Path.create( Path parent , Path relPath , boolean normalize );3;0;13
CurrentElement.denotesCurrent( );1;0;3
NameElement.NameElement( QName name , int index );1;0;3
PathBuilder.addRoot( );1;0;3
Path.create( Path parent , QName name , int index , boolean normalize );2;0;10
Path.toJCRPath( NamespaceResolver resolver );1;0;3
RootElement.denotesRoot( );1;0;3
Path.toString( );4;4;15
PathBuilder.addLast( QName name , int index );1;0;3
RootElement.toJCRName( NamespaceResolver resolver );1;0;3
CurrentElement.toString( );1;0;3
Path.isDescendantOf( Path other );2;1;6
CurrentElement.CurrentElement( );1;0;3
PathElement.normalizeIndex( int index );2;1;3
Path.create( Path parent , String relJCRPath , NamespaceResolver resolver , boolean canonicalize );2;0;8
Path.getNameElement( );1;1;3
Path.computeRelativePath( Path other );11;16;33